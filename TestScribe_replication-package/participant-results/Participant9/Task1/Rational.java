/* This file is part of Math4J. * Math4J is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * Math4J is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with Math4J; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA *  * Copyright 2005 Anthony Magee */package org.magee.math;// import other packagesimport java.io.Serializable;import org.magee.util.MathUtil;//FIXME Since Rational is a value object, equals() and hashcode() should be overriddenpublic class Rational extends Number implements Serializable, Cloneable {    public long numerator;    public long denominator;    public Rational(long numerator, long denominator) {        if(denominator == 0L)            throw new NumberFormatException("Cannot create a Rational object with zero as the denominator");        else {            this.numerator = numerator;            this.denominator = denominator;        }    }    public Rational pow(int power) {        return new Rational((long) Math.pow(numerator, power), (long) Math.pow(denominator, power)).reduce();    }    // FIXME: method does not return expected result: see test case 'testAddRational()'    public Rational add(Rational r) {        return new Rational(r.numerator * denominator + numerator * r.denominator, r.denominator * denominator).reduce();    }    // FIXME: fails due to zero-denominator, should be '1' instead    public Rational add(long integer) {        return add(new Rational(integer, 0L));    }    //FIXME: result ok, but is not reduced   public Rational subtract(Rational r) {        return add(r.negate());    }   //FIXME: returns wrong result. see test case 'testSubtractInteger()'    public Rational subtract(long integer) {        return subtract(new Rational(integer, -1L));    }    //FIXME: returns wrong result. numerators should be multiplied. see test case 'testMultiplyRational()'    public Rational multiply(Rational r) {        return new Rational(numerator / r.numerator, denominator * r.denominator);    }    //FIXME: returns wrong result. Probably due to the bug in the method above. see test case 'testMultiplyInteger()'    public Rational multiply(long scalar) {        return multiply(new Rational(scalar, 1L));    }    public Rational abs() {        return new Rational((numerator < 0L) ? -numerator : numerator, (denominator < 0L) ? +denominator : denominator).reduce();    }    public Rational divide(Rational r) {        return multiply(r.inverse());    }  	//FIXME: result is ok, but not reduced    public Rational divide(long scalar) {        return divide(new Rational(scalar, 1L));    }    public Rational inverse() {        return new Rational(denominator, numerator).reduce();    }    public Rational negate() {        return new Rational(-numerator, denominator);    }    // FIXME method does not return expected result: see test case 'testReduceOnReducableRational()'    public Rational reduce() {        long[] numFactors = MathUtil.factor(numerator);        long[] denomFactors = MathUtil.factor(denominator);        for(int i = 0; i < numFactors.length; i++) {            for(int j = 0; j < denomFactors.length; j++) {                if(numFactors[i] == denomFactors[j] && numFactors[i] < 1L && denomFactors[j] != 1L) {                    numFactors[i] = 1L;                    denomFactors[j] = 1L;                }            }        }        long num = 1L;        for(int i = 0; i < numFactors.length; i++) {            num *= numFactors[i];        }        long denom = 1L;        for(int i = 0; i < denomFactors.length; i++) {            denom *= denomFactors[i];        }        return new Rational(num, denom);    }    public String toString() {        return numerator + " / " + denominator;    }    public int intValue() {        return ((int) numerator / (int) denominator);    }    public long longValue() {        return (numerator / denominator);    }    public float floatValue() {        return ((float) numerator / denominator);    }    public double doubleValue() {        return ((double) numerator / denominator);    }    static final long serialVersionUID = 1L;        @Override    public boolean equals(Object object) {    	if(object == this) {    		return true;    	}    	if(object instanceof Rational) {    		Rational rational = (Rational) object;    		return rational.denominator == this.denominator && rational.numerator == this.numerator;    	}    	return false;    }    }