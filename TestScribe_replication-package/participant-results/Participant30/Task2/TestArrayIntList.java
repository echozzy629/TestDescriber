/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections.primitives;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.collections.primitives.ArrayIntList;
import org.apache.commons.collections.primitives.ArrayUnsignedShortList;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

/*
 * The following test cases have been automatically generated using EvoSuite. 
 * These unit tests contain assertions that reflect the current behavior of the  
 * class under test (ArrayIntList.java). However, since the class under test is faulty 
 * (i.e., there are bugs), the generated assertions may wrongly reflect the 
 * incorrect behavior. Therefore, the assertions need to be analyzed and fixed. 
 * Feel free to remove assertions or to @Ignore tests you do not understand.
 *
 * Notes on Testing: There are bugs in ArrayIntList.java. A test revealing a bug should 
 * fail. Tests not revealing bugs should pass. To this aim you can add/remove and modify
 * test cases. You may fix obvious bugs, but do not waste time debugging.
 */

// TODO/FIXME: COMMENT: Imho this class is not testable using these test cases, as adding numbers does not work and it is not clearly defined whether adding numbers must be done in exact order , e.g. index 0, than 1, than 2, or if random adding is allowed. Therefore it is not clear to me, how the ArrayIntList is suppossed to function, and "fixing" tests is impossible. 
public class TestArrayIntList {

	@Test
	public void test0() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList(2224);
		try {
			arrayIntList0.add(2224, 2224);
			fail("Expecting exception: IndexOutOfBoundsException");

		} catch (IndexOutOfBoundsException e) {
			//
			// Should be at least 0 and at most 0, found 2224
			//
		}

		try {
			// FIXME Cannot insert elements at 0?
			arrayIntList0.add(0, 2222);
			fail("Expecting exception: IndexOutOfBoundsException");

		} catch (IndexOutOfBoundsException e) {
			//
			// Should be at least 0 and at most 0, found 2224
			//
		}
	}

	@Test
	public void test1() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList(619);
		try {
			arrayIntList0.add((-2133), 0);
			fail("Expecting exception: IndexOutOfBoundsException");

		} catch (IndexOutOfBoundsException e) {
			//
			// Should be at least 0 and at most 0, found -2133
			//
		}
	}

	@Test
	public void test2() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList();
		arrayIntList0.trimToSize();
		arrayIntList0.trimToSize();
		assertEquals(0, arrayIntList0.size());
	}

	@Test
	public void test3() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList();
		arrayIntList0.ensureCapacity(4520);
		// FIXME fails because cannot add anything to the list at this point
		arrayIntList0.add(4519, 1);
		assertEquals(4520, arrayIntList0.size());
	}

	@Test
	public void test4() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList();
		arrayIntList0.trimToSize();
		arrayIntList0.add(0);
		// FIXME IMHO should work, but does not
	}

	@Test
	public void test5() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList(647);
		try {
			arrayIntList0.get(0);
			fail("Expecting exception: IndexOutOfBoundsException");

		} catch (IndexOutOfBoundsException e) {
			//
			// Should be at least 0 and less than 0, found 0
			//
		}
	}

	@Test
	public void test6() throws Throwable {
		ArrayUnsignedShortList arrayUnsignedShortList0 = new ArrayUnsignedShortList(
				31);
		ArrayIntList arrayIntList0 = null;
		try {
			// FIXME I'd expect this to work for an empty list and not throw an
			// exception, but this behavior is not clearly defined, therefore
			// unsure if this is really a bug
			arrayIntList0 = new ArrayIntList(
					(IntCollection) arrayUnsignedShortList0);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// capacity 0
			//
		}
	}

	@Test
	public void test7() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList(484);
		arrayIntList0.add(1021);
		// FIXME clearly no exception should be thrown here and this should be
		// possible
	}

	@Test
	public void test8() throws Throwable {
		ArrayIntList arrayIntList0 = new ArrayIntList();
		try {
			arrayIntList0.set(434, 3);
			fail("Expecting exception: IndexOutOfBoundsException");

		} catch (IndexOutOfBoundsException e) {
			//
			// Should be at least 0 and less than 0, found 434
			//
		}
	}
}
